/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface RoleDefinitionResolverInterface extends Interface {
  functions: {
    ABI: TypedFunctionDescription<{
      encode([node, contentTypes]: [Arrayish, BigNumberish]): string;
    }>;

    addConditionType: TypedFunctionDescription<{
      encode([node, conditionType]: [Arrayish, BigNumberish]): string;
    }>;

    addr: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    authorisations: TypedFunctionDescription<{
      encode([, ,]: [Arrayish, string, string]): string;
    }>;

    clearDNSZone: TypedFunctionDescription<{
      encode([node]: [Arrayish]): string;
    }>;

    conditionTypes: TypedFunctionDescription<{
      encode([,]: [Arrayish, BigNumberish]): string;
    }>;

    contenthash: TypedFunctionDescription<{
      encode([node]: [Arrayish]): string;
    }>;

    dnsRecord: TypedFunctionDescription<{
      encode([node, name, resource]: [
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    hasDNSRecords: TypedFunctionDescription<{
      encode([node, name]: [Arrayish, Arrayish]): string;
    }>;

    interfaceImplementer: TypedFunctionDescription<{
      encode([node, interfaceID]: [Arrayish, Arrayish]): string;
    }>;

    issuerType: TypedFunctionDescription<{
      encode([node]: [Arrayish]): string;
    }>;

    issuerTypes: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    issuers: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    multicall: TypedFunctionDescription<{
      encode([data]: [Arrayish[]]): string;
    }>;

    name: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    prerequisiteRoles: TypedFunctionDescription<{
      encode([node]: [Arrayish]): string;
    }>;

    pubkey: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    removeConditionType: TypedFunctionDescription<{
      encode([node, conditionType]: [Arrayish, BigNumberish]): string;
    }>;

    requiresConditionType: TypedFunctionDescription<{
      encode([node, condition]: [Arrayish, BigNumberish]): string;
    }>;

    setABI: TypedFunctionDescription<{
      encode([node, contentType, data]: [
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    setAddr: TypedFunctionDescription<{
      encode([node, coinType, a]: [Arrayish, BigNumberish, Arrayish]): string;
    }>;

    setAuthorisation: TypedFunctionDescription<{
      encode([node, target, isAuthorised]: [Arrayish, string, boolean]): string;
    }>;

    setContenthash: TypedFunctionDescription<{
      encode([node, hash]: [Arrayish, Arrayish]): string;
    }>;

    setDNSRecords: TypedFunctionDescription<{
      encode([node, data]: [Arrayish, Arrayish]): string;
    }>;

    setInterface: TypedFunctionDescription<{
      encode([node, interfaceID, implementer]: [
        Arrayish,
        Arrayish,
        string
      ]): string;
    }>;

    setIssuerDids: TypedFunctionDescription<{
      encode([node, dids]: [Arrayish, string[]]): string;
    }>;

    setIssuerRole: TypedFunctionDescription<{
      encode([node, role]: [Arrayish, Arrayish]): string;
    }>;

    setIssuerType: TypedFunctionDescription<{
      encode([node, issuerType]: [Arrayish, BigNumberish]): string;
    }>;

    setName: TypedFunctionDescription<{
      encode([node, name]: [Arrayish, string]): string;
    }>;

    setPrerequisiteRoles: TypedFunctionDescription<{
      encode([node, roles]: [Arrayish, Arrayish[]]): string;
    }>;

    setPubkey: TypedFunctionDescription<{
      encode([node, x, y]: [Arrayish, Arrayish, Arrayish]): string;
    }>;

    setText: TypedFunctionDescription<{
      encode([node, key, value]: [Arrayish, string, string]): string;
    }>;

    setVersionNumber: TypedFunctionDescription<{
      encode([node, versionNumber]: [Arrayish, string]): string;
    }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;

    text: TypedFunctionDescription<{
      encode([node, key]: [Arrayish, string]): string;
    }>;

    versionNumber: TypedFunctionDescription<{
      encode([node]: [Arrayish]): string;
    }>;

    versionNumbers: TypedFunctionDescription<{
      encode([]: [Arrayish]): string;
    }>;
  };

  events: {
    ABIChanged: TypedEventDescription<{
      encodeTopics([node, contentType]: [
        Arrayish | null,
        BigNumberish | null
      ]): string[];
    }>;

    AddrChanged: TypedEventDescription<{
      encodeTopics([node, a]: [Arrayish | null, null]): string[];
    }>;

    AddressChanged: TypedEventDescription<{
      encodeTopics([node, coinType, newAddress]: [
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    AuthorisationChanged: TypedEventDescription<{
      encodeTopics([node, owner, target, isAuthorised]: [
        Arrayish | null,
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    ContenthashChanged: TypedEventDescription<{
      encodeTopics([node, hash]: [Arrayish | null, null]): string[];
    }>;

    DNSRecordChanged: TypedEventDescription<{
      encodeTopics([node, name, resource, record]: [
        Arrayish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    DNSRecordDeleted: TypedEventDescription<{
      encodeTopics([node, name, resource]: [
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    DNSZoneCleared: TypedEventDescription<{
      encodeTopics([node]: [Arrayish | null]): string[];
    }>;

    EnrolmentConditionTypeAdded: TypedEventDescription<{
      encodeTopics([node, addedType]: [Arrayish | null, null]): string[];
    }>;

    EnrolmentConditionTypeRemoved: TypedEventDescription<{
      encodeTopics([node, removedType]: [Arrayish | null, null]): string[];
    }>;

    InterfaceChanged: TypedEventDescription<{
      encodeTopics([node, interfaceID, implementer]: [
        Arrayish | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    IssuerTypeChanged: TypedEventDescription<{
      encodeTopics([node, newType]: [Arrayish | null, null]): string[];
    }>;

    IssuersChanged: TypedEventDescription<{
      encodeTopics([node, newIssuers]: [Arrayish | null, null]): string[];
    }>;

    NameChanged: TypedEventDescription<{
      encodeTopics([node, name]: [Arrayish | null, null]): string[];
    }>;

    PrerequisiteRolesChanged: TypedEventDescription<{
      encodeTopics([node, newPrerequisiteRoles]: [
        Arrayish | null,
        null
      ]): string[];
    }>;

    PubkeyChanged: TypedEventDescription<{
      encodeTopics([node, x, y]: [Arrayish | null, null, null]): string[];
    }>;

    TextChanged: TypedEventDescription<{
      encodeTopics([node, indexedKey, key]: [
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;

    VersionNumberChanged: TypedEventDescription<{
      encodeTopics([node, newVersion]: [Arrayish | null, null]): string[];
    }>;
  };
}

export class RoleDefinitionResolver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): RoleDefinitionResolver;
  attach(addressOrName: string): RoleDefinitionResolver;
  deployed(): Promise<RoleDefinitionResolver>;

  on(event: EventFilter | string, listener: Listener): RoleDefinitionResolver;
  once(event: EventFilter | string, listener: Listener): RoleDefinitionResolver;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): RoleDefinitionResolver;
  removeAllListeners(eventName: EventFilter | string): RoleDefinitionResolver;
  removeListener(eventName: any, listener: Listener): RoleDefinitionResolver;

  interface: RoleDefinitionResolverInterface;

  functions: {
    ABI(
      node: Arrayish,
      contentTypes: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<[BigNumber, string]>;

    "ABI(bytes32,uint256)"(
      node: Arrayish,
      contentTypes: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<[BigNumber, string]>;

    addConditionType(
      node: Arrayish,
      conditionType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addConditionType(bytes32,uint256)"(
      node: Arrayish,
      conditionType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addr(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

    "addr(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "addr(bytes32,uint256)"(
      node: Arrayish,
      coinType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    authorisations(
      arg0: Arrayish,
      arg1: string,
      arg2: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "authorisations(bytes32,address,address)"(
      arg0: Arrayish,
      arg1: string,
      arg2: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    clearDNSZone(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "clearDNSZone(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    conditionTypes(
      arg0: Arrayish,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "conditionTypes(bytes32,uint256)"(
      arg0: Arrayish,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    contenthash(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "contenthash(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    dnsRecord(
      node: Arrayish,
      name: Arrayish,
      resource: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "dnsRecord(bytes32,bytes32,uint16)"(
      node: Arrayish,
      name: Arrayish,
      resource: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    hasDNSRecords(
      node: Arrayish,
      name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "hasDNSRecords(bytes32,bytes32)"(
      node: Arrayish,
      name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    interfaceImplementer(
      node: Arrayish,
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "interfaceImplementer(bytes32,bytes4)"(
      node: Arrayish,
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    issuerType(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    "issuerType(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    issuerTypes(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    "issuerTypes(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    issuers(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<[string[], string] & { dids: string[]; role: string }>;

    "issuers(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<[string[], string] & { dids: string[]; role: string }>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    name(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

    "name(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    prerequisiteRoles(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    "prerequisiteRoles(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    pubkey(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<[string, string] & { x: string; y: string }>;

    "pubkey(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<[string, string] & { x: string; y: string }>;

    removeConditionType(
      node: Arrayish,
      conditionType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "removeConditionType(bytes32,uint256)"(
      node: Arrayish,
      conditionType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requiresConditionType(
      node: Arrayish,
      condition: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "requiresConditionType(bytes32,uint256)"(
      node: Arrayish,
      condition: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    setABI(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setABI(bytes32,uint256,bytes)"(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAddr(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAddr(bytes32,uint256,bytes)"(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAddr(bytes32,address)"(
      node: Arrayish,
      a: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthorisation(
      node: Arrayish,
      target: string,
      isAuthorised: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthorisation(bytes32,address,bool)"(
      node: Arrayish,
      target: string,
      isAuthorised: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setContenthash(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setContenthash(bytes32,bytes)"(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setDNSRecords(
      node: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setDNSRecords(bytes32,bytes)"(
      node: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setInterface(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setInterface(bytes32,bytes4,address)"(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setIssuerDids(
      node: Arrayish,
      dids: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setIssuerDids(bytes32,address[])"(
      node: Arrayish,
      dids: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setIssuerRole(
      node: Arrayish,
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setIssuerRole(bytes32,bytes32)"(
      node: Arrayish,
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setIssuerType(
      node: Arrayish,
      issuerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setIssuerType(bytes32,uint8)"(
      node: Arrayish,
      issuerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setName(
      node: Arrayish,
      name: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setName(bytes32,string)"(
      node: Arrayish,
      name: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPrerequisiteRoles(
      node: Arrayish,
      roles: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setPrerequisiteRoles(bytes32,bytes32[])"(
      node: Arrayish,
      roles: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPubkey(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setPubkey(bytes32,bytes32,bytes32)"(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setText(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setText(bytes32,string,string)"(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setVersionNumber(
      node: Arrayish,
      versionNumber: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setVersionNumber(bytes32,string)"(
      node: Arrayish,
      versionNumber: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    text(
      node: Arrayish,
      key: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "text(bytes32,string)"(
      node: Arrayish,
      key: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    versionNumber(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "versionNumber(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    versionNumbers(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "versionNumbers(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;
  };

  ABI(
    node: Arrayish,
    contentTypes: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<[BigNumber, string]>;

  "ABI(bytes32,uint256)"(
    node: Arrayish,
    contentTypes: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<[BigNumber, string]>;

  addConditionType(
    node: Arrayish,
    conditionType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addConditionType(bytes32,uint256)"(
    node: Arrayish,
    conditionType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addr(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

  "addr(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "addr(bytes32,uint256)"(
    node: Arrayish,
    coinType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  authorisations(
    arg0: Arrayish,
    arg1: string,
    arg2: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "authorisations(bytes32,address,address)"(
    arg0: Arrayish,
    arg1: string,
    arg2: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  clearDNSZone(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "clearDNSZone(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  conditionTypes(
    arg0: Arrayish,
    arg1: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "conditionTypes(bytes32,uint256)"(
    arg0: Arrayish,
    arg1: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  contenthash(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "contenthash(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  dnsRecord(
    node: Arrayish,
    name: Arrayish,
    resource: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "dnsRecord(bytes32,bytes32,uint16)"(
    node: Arrayish,
    name: Arrayish,
    resource: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  hasDNSRecords(
    node: Arrayish,
    name: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "hasDNSRecords(bytes32,bytes32)"(
    node: Arrayish,
    name: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  interfaceImplementer(
    node: Arrayish,
    interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "interfaceImplementer(bytes32,bytes4)"(
    node: Arrayish,
    interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  issuerType(node: Arrayish, overrides?: TransactionOverrides): Promise<number>;

  "issuerType(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  issuerTypes(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  "issuerTypes(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  issuers(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<[string[], string] & { dids: string[]; role: string }>;

  "issuers(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<[string[], string] & { dids: string[]; role: string }>;

  multicall(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multicall(bytes[])"(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  name(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

  "name(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  prerequisiteRoles(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  "prerequisiteRoles(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  pubkey(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<[string, string] & { x: string; y: string }>;

  "pubkey(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<[string, string] & { x: string; y: string }>;

  removeConditionType(
    node: Arrayish,
    conditionType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "removeConditionType(bytes32,uint256)"(
    node: Arrayish,
    conditionType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requiresConditionType(
    node: Arrayish,
    condition: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "requiresConditionType(bytes32,uint256)"(
    node: Arrayish,
    condition: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  setABI(
    node: Arrayish,
    contentType: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setABI(bytes32,uint256,bytes)"(
    node: Arrayish,
    contentType: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAddr(
    node: Arrayish,
    coinType: BigNumberish,
    a: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAddr(bytes32,uint256,bytes)"(
    node: Arrayish,
    coinType: BigNumberish,
    a: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAddr(bytes32,address)"(
    node: Arrayish,
    a: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthorisation(
    node: Arrayish,
    target: string,
    isAuthorised: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthorisation(bytes32,address,bool)"(
    node: Arrayish,
    target: string,
    isAuthorised: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setContenthash(
    node: Arrayish,
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setContenthash(bytes32,bytes)"(
    node: Arrayish,
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setDNSRecords(
    node: Arrayish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setDNSRecords(bytes32,bytes)"(
    node: Arrayish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setInterface(
    node: Arrayish,
    interfaceID: Arrayish,
    implementer: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setInterface(bytes32,bytes4,address)"(
    node: Arrayish,
    interfaceID: Arrayish,
    implementer: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setIssuerDids(
    node: Arrayish,
    dids: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setIssuerDids(bytes32,address[])"(
    node: Arrayish,
    dids: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setIssuerRole(
    node: Arrayish,
    role: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setIssuerRole(bytes32,bytes32)"(
    node: Arrayish,
    role: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setIssuerType(
    node: Arrayish,
    issuerType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setIssuerType(bytes32,uint8)"(
    node: Arrayish,
    issuerType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setName(
    node: Arrayish,
    name: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setName(bytes32,string)"(
    node: Arrayish,
    name: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPrerequisiteRoles(
    node: Arrayish,
    roles: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setPrerequisiteRoles(bytes32,bytes32[])"(
    node: Arrayish,
    roles: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPubkey(
    node: Arrayish,
    x: Arrayish,
    y: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setPubkey(bytes32,bytes32,bytes32)"(
    node: Arrayish,
    x: Arrayish,
    y: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setText(
    node: Arrayish,
    key: string,
    value: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setText(bytes32,string,string)"(
    node: Arrayish,
    key: string,
    value: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setVersionNumber(
    node: Arrayish,
    versionNumber: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setVersionNumber(bytes32,string)"(
    node: Arrayish,
    versionNumber: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  text(
    node: Arrayish,
    key: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "text(bytes32,string)"(
    node: Arrayish,
    key: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  versionNumber(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "versionNumber(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  versionNumbers(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "versionNumbers(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  filters: {
    ABIChanged(
      node: Arrayish | null,
      contentType: BigNumberish | null
    ): EventFilter;

    AddrChanged(node: Arrayish | null, a: null): EventFilter;

    AddressChanged(
      node: Arrayish | null,
      coinType: null,
      newAddress: null
    ): EventFilter;

    AuthorisationChanged(
      node: Arrayish | null,
      owner: string | null,
      target: string | null,
      isAuthorised: null
    ): EventFilter;

    ContenthashChanged(node: Arrayish | null, hash: null): EventFilter;

    DNSRecordChanged(
      node: Arrayish | null,
      name: null,
      resource: null,
      record: null
    ): EventFilter;

    DNSRecordDeleted(
      node: Arrayish | null,
      name: null,
      resource: null
    ): EventFilter;

    DNSZoneCleared(node: Arrayish | null): EventFilter;

    EnrolmentConditionTypeAdded(
      node: Arrayish | null,
      addedType: null
    ): EventFilter;

    EnrolmentConditionTypeRemoved(
      node: Arrayish | null,
      removedType: null
    ): EventFilter;

    InterfaceChanged(
      node: Arrayish | null,
      interfaceID: Arrayish | null,
      implementer: null
    ): EventFilter;

    IssuerTypeChanged(node: Arrayish | null, newType: null): EventFilter;

    IssuersChanged(node: Arrayish | null, newIssuers: null): EventFilter;

    NameChanged(node: Arrayish | null, name: null): EventFilter;

    PrerequisiteRolesChanged(
      node: Arrayish | null,
      newPrerequisiteRoles: null
    ): EventFilter;

    PubkeyChanged(node: Arrayish | null, x: null, y: null): EventFilter;

    TextChanged(
      node: Arrayish | null,
      indexedKey: string | null,
      key: null
    ): EventFilter;

    VersionNumberChanged(node: Arrayish | null, newVersion: null): EventFilter;
  };

  estimate: {
    ABI(
      node: Arrayish,
      contentTypes: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "ABI(bytes32,uint256)"(
      node: Arrayish,
      contentTypes: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addConditionType(
      node: Arrayish,
      conditionType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addConditionType(bytes32,uint256)"(
      node: Arrayish,
      conditionType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addr(node: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>;

    "addr(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addr(bytes32,uint256)"(
      node: Arrayish,
      coinType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    authorisations(
      arg0: Arrayish,
      arg1: string,
      arg2: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "authorisations(bytes32,address,address)"(
      arg0: Arrayish,
      arg1: string,
      arg2: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    clearDNSZone(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "clearDNSZone(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    conditionTypes(
      arg0: Arrayish,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "conditionTypes(bytes32,uint256)"(
      arg0: Arrayish,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    contenthash(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "contenthash(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    dnsRecord(
      node: Arrayish,
      name: Arrayish,
      resource: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "dnsRecord(bytes32,bytes32,uint16)"(
      node: Arrayish,
      name: Arrayish,
      resource: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hasDNSRecords(
      node: Arrayish,
      name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "hasDNSRecords(bytes32,bytes32)"(
      node: Arrayish,
      name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    interfaceImplementer(
      node: Arrayish,
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "interfaceImplementer(bytes32,bytes4)"(
      node: Arrayish,
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    issuerType(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "issuerType(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    issuerTypes(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "issuerTypes(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    issuers(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "issuers(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    name(node: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>;

    "name(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    prerequisiteRoles(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "prerequisiteRoles(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    pubkey(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "pubkey(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    removeConditionType(
      node: Arrayish,
      conditionType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "removeConditionType(bytes32,uint256)"(
      node: Arrayish,
      conditionType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    requiresConditionType(
      node: Arrayish,
      condition: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "requiresConditionType(bytes32,uint256)"(
      node: Arrayish,
      condition: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setABI(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setABI(bytes32,uint256,bytes)"(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAddr(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAddr(bytes32,uint256,bytes)"(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAddr(bytes32,address)"(
      node: Arrayish,
      a: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAuthorisation(
      node: Arrayish,
      target: string,
      isAuthorised: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthorisation(bytes32,address,bool)"(
      node: Arrayish,
      target: string,
      isAuthorised: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setContenthash(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setContenthash(bytes32,bytes)"(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setDNSRecords(
      node: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setDNSRecords(bytes32,bytes)"(
      node: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setInterface(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setInterface(bytes32,bytes4,address)"(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setIssuerDids(
      node: Arrayish,
      dids: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setIssuerDids(bytes32,address[])"(
      node: Arrayish,
      dids: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setIssuerRole(
      node: Arrayish,
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setIssuerRole(bytes32,bytes32)"(
      node: Arrayish,
      role: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setIssuerType(
      node: Arrayish,
      issuerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setIssuerType(bytes32,uint8)"(
      node: Arrayish,
      issuerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setName(
      node: Arrayish,
      name: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setName(bytes32,string)"(
      node: Arrayish,
      name: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setPrerequisiteRoles(
      node: Arrayish,
      roles: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setPrerequisiteRoles(bytes32,bytes32[])"(
      node: Arrayish,
      roles: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setPubkey(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setPubkey(bytes32,bytes32,bytes32)"(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setText(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setText(bytes32,string,string)"(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setVersionNumber(
      node: Arrayish,
      versionNumber: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setVersionNumber(bytes32,string)"(
      node: Arrayish,
      versionNumber: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    text(
      node: Arrayish,
      key: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "text(bytes32,string)"(
      node: Arrayish,
      key: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    versionNumber(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "versionNumber(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    versionNumbers(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "versionNumbers(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
